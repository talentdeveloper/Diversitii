**Follow the below steps before running the app or it may crash**


Notes:
-Unimplemented method to post scores to Facebook is in MainActivity
-Default game mode is single player
-There is a 10 character limit on player name in enterNameText in activity_scorecard.xml
-Notifications are enabled by default (via value of "DEFAULT_NOTIFICATIONS_OK" in Constants.java)
-Developer payload checking, used for extra security with user purchases, is unimplemented in
 Utils.java, as there is not infrastructure for it at this time. See notes (quoted from Google) in
 TODOs.
-The packs to promote are limited by the value of Constants.java's "PACKS_TO_PROMOTE_LIMIT".
-There is no provision for checking data freshness.
-Subscription months are considered to be 30 days.
-The blanket subscription option remains on the packs page.
-Category names are expected to be unique



Customization

1) Add the app website URL to app_website in strings.xml

2) Add the game rules text to game_rules_detail in strings.xml

3) Add email to contact_email in strings.xml

4) Change app_name in strings.xml

5) Replace the default app icon in the mipmap folders (this appears as the app launcher and also on
notifications)



Firebase

You will need to connect a Google account to the app to access data stored with Firebase
(at https://console.firebase.google.com). Note that app statistics may take a while to update on
the console.

1) You can hook the app code to Firebase in Android Studio (if it is up to date with downloads) by
going to Tools -> Firebase and selecting "Cloud Messaging" -> "Set up Firebase Cloud Messaging" ->
"Connect your app to Firebase"
Troubleshooting: https://developer.android.com/studio/write/firebase.html
Adding Firebase manually: https://firebase.google.com/docs/android/setup

2) Once you are connected you will be able to see app metrics on your Firebase console (if you have
multiple Google accounts, make sure you are signed in with the one you connected to the app). On
the left-hand menu go to Authentication and enable "Anonymous" under "Sign-in providers". This will
allow app instances to authenticate themselves to fetch data from your cloud storage.

3) Notifications! Now that your app is connected, you can send notifications to all users with the
app installed simply by going to "Notifications" in the left-hand menu of the Firebase console and
clicking "NEW MESSAGE".
Here you can fill out the message body, delivery time, and more, including whether the notification
should make a sound.
    a) Select all app users by selecting the app name in the dropdown menu under
    "Target" -> "User Segment" -> "Target user if...".
    b) Select only users who have notifications enabled in their settings by choosing "Target" ->
    "Topic" and entering "notifications" (Constants.NOTIFICATIONS_TOPIC) (NOTE: you will not be
    able to send to this topic until at least one device is running the app with notifications
    enabled, which will create the topic, and there is up to a 1 day delay before the topic will
    appear in your console)

4) Cloud storage: From the left-hand menu, go to "Storage". Click the "RULES" tab and enter and
publish the following text:
service firebase.storage {
  match /b/{bucket}/o {
    match /free/{fileName} {
      allow read: if request.auth != null && fileName.matches('.*\\.json');
    }
    match /packs/{packDir}/{fileName} {
      allow read: if request.auth != null && fileName.matches('.*\\.json');
    }
    match /offers/offers.txt {
      allow read: if request.auth != null;
    }
  }
}

5) Click the "FILES" tab and create 3 new folders (button next to "UPLOAD FILE" button) called
 "offers", "free", and "packs" (all lowercase)

6) Adding offers:
Offers are text-only. Open the offers folder and upload a file named "offers.txt". Click on the
uploaded file and open "File location" on the right, then click to copy the "Storage location" URL
and paste this in Constants.STORAGE_URL, less the text "offers/offers.txt". The contents of the
offers file will now always show in the Offers circle on the rules page. Offers file size is
constrained by Constants.MAX_OFFERS_SIZE. Uploading a new version of offers.txt will automatically
overwrite the old one (no need to delete it).

7) Adding the free pack:
In the "free" folder in cloud storage, upload 3 files: "topics.json", "questions.json", and
"answers.json". These are included in this project (in the "assets" folder), and were generated by
copy-pasting the contents of (with changes noted below) topics - 350.csv, questions - 350.csv,
and answers - 350.csv (make sure to select only columns with data) into
https://www.freeformatter.com/csv-to-json-converter.html with the following settings:
  Delimiter character: Tabs
  Process empty values as: Empty strings
  Indentation level: Compact mode (to reduce the size of the data)
and the rest at default settings. DO NOT save the output as a file. Set it to open in a new window
and copy-paste into a .json file you create in Android Studio. This is to avoid encoding problems.
Changes to questions - 350.csv:
    i) at line 522, since it starts with a quotation mark: " --> \" (added backslash)
    ii) all aaa --> 1, bbb --> 2, ccc --> 3 (this can be accomplished quickly with
    find-and-replace-all, there should be 350 matches in each case)
    iii) Question ccc for topic 157 had its topic ID as 167
Changes to answers - 350.csv:
    i) "Cuddles" lists its topic ID as 39 instead of 40
    ii) "the Doh-Dohs" lists its topic ID as 59 instead of 60
    iii) Answers to topic 79 are listed under topic 78 (**there are no topics 80 and 81**)
    iv) "BTU" lists its topic ID as 159 instead of 160
    v) Answers to topic 179 are listed under topic 178
    vi) "Cumin" lists its topic ID as 239 instead of 240
    vii) "Banoffee Pie" lists its topic ID as 259 instead of 260
    viii) "SEVEN" lists its topic ID as 339 instead of 340
    ix) "Martin Frobisher" lists its answer number as 4 instead of 8
Changes to topics - 250.csv:
    i) The PackId column is excluded from the json input
The code expects each answer ID-topic ID, question ID-topic ID combination to be unique (so wrong
answers will need to be numbered 4 - 8). Duplicate combinations will be overwritten.
Free pack file size (topics, questions, and answers separately) is constrained by
Constants.MAX_PACK_SIZE.
**When making changes to topic/question/answer csv's, the column headings must remain the same**

When the app loads on a device for the first time, it loads the contents of the assets folder into
its database. It will not download from the cloud unless the update time on the cloud files is
newer than the update time on the files included in the app, that is, the free data won't be
downloaded unless the app data is out of date. If you make changes to the free pack files in the
cloud, you can (but don't have to) update them in the app as well*, if you want to minimize data
download. In this case you will need to update the Constants.FREE_PACK_UPDATE_TIME value to the
value found here: https://www.epochconverter.com/ next to "The current Unix epoch time is".
    *You will need to change the value of Constants.FREE_PACK_UPDATE_TIME the first time you upload
    the free pack data, as the time saved in the app will be older than the time you upload files
    to the cloud.

8) Adding paid packs:
In the "packs" folder in cloud storage, add a folder called "pack1". In "pack1" upload files
"topics.json", "questions.json", and "answers.json" with the pack data, created following the
procedure in the previous step. Subsequent packs will go in folders "pack2", "pack3", etc. and
consist of three data files with the names "topics.json", "questions.json", and "answers.json".

Go to the Database page from the left-hand menu. Hover your mouse over the default database name
and click the green "+". Enter "pack_count" for "Name" and the number of packs available (e.g. 10)
for "Value" and click "ADD". This is where the app will check to learn how many packs are available
for a user to buy.
**When you add a new pack folder to cloud storage, increment the number in pack_count (click on the
value to edit it)**
Under the Database page's "RULES" tab, delete the line that starts with ".write" and publish the
rules. This will prevent anyone writing to the database, except for you via the console.
Pack file size (topics, questions, and answers separately) is constrained by
Constants.MAX_PACK_SIZE.

9) Adding topic categories:

a) From the "Storage" section of your Firebase project dashboard (where the "free", "offers", and
"packs" folders are), create a new folder named "category_packs".

b) Switch to the "RULES" tab and publish the following text in place of the current rules:

service firebase.storage {
  match /b/{bucket}/o {
    match /free/{fileName} {
      allow read: if request.auth != null && fileName.matches('.*\\.json');
    }
    match /packs/{packDir}/{fileName} {
      allow read: if request.auth != null && fileName.matches('.*\\.json');
    }
    match /offers/offers.txt {
      allow read: if request.auth != null;
    }
    match /category_packs/{a}/{b} {
      allow read: if request.auth != null;
    }
  }
}

c) To add a new topic category, go to the Google Play Console and create a new managed in-app item,
giving it a product ID beginning with "cat" and followed by a number, starting from 1 and
increasing sequentially. This approach is used in place of more descriptive product names because i)
the IDs must be unique, ii) the app needs to know in advance what the names of the category pack
files will be (this could be accomplished via a lookup table, but this adds additional complexity
to the category addition process), and iii) while a product's contents can change, the product's ID
cannot.

d)
NOTE: This storage system will need to be redesigned to allow category topics to appear in random
topic packs (as it was otherwise specified in the design requirements), and to facilitate loading
of a list of all unbought topic categories (outside the scope of the category packs addition).


Back on Firebase, create a new folder in the "category_packs" folder for each product ID you
just created, and give each the exact same name as its product ID, e.g. "cat1", "cat2". In these
folders, upload 5 items:
    - the "topics.json" for the category
    - the "questions.json" for the category
    - the "answers.json" for the category
    - the "icon.png" icon for the category
    - a text file "data.txt" containing a single line of text: the category name to display
        The category name file cannot exceed 1KB in size. As long as you are using ASCII characters
        (no "special" characters) the default Windows file encoding is fine for creating this file.

Tip: To improve loading time and reduce the amount of data stored on and downloaded via Firebase,
try to keep the icon files as small as possible.

e) AFTER you have finished adding a topic category, go to the Firebase Database page and add or
edit an item with the name "category_count" such that it has a value equal to the number of
categories available, i.e., equal to the number of "cat" prefixed folders in the "category_packs"
folder.
"category_count" should be at the same indentation level as "pack_count".



In-App Billing

Since the app has in-app purchase options, it needs to be connected to a developer account to be
tested. (You will need one anyway to publish on the Google Play Store.)

1) Create an application on the Developer Console, at https://play.google.com/apps/publish/. You'll
be taken to a store listing page with your application draft.

2) Under "Services & APIs" in the left menu, find and copy the application's public key (a base-64
string) under "Licensing & in-app billing". Make this the value of BASE64_PUBLIC_KEY in
Constants.java.

3) From Android Studio, export an APK, signing it with a production developer certificate. (This is
what you will have to do anyway before publishing the app, quick tutorial:
https://stackoverflow.com/a/28938286/3808463)

4) Back on the Google Play Console, upload your APK for Alpha Testing ("App releases" -> "MANAGE
ALPHA").

5) To test in-app purchases you need 2 accounts (you don't need to pay for the test account,
I believe): the account that publishes the app and an account to buy from it (if you buy from the
publishing account your purchases won't be accepted). The test account must be added to the
"testers" section of your app (under "Manage testers" when creating an alpha release). You can set
the test user account so any test in-app purchases made will not actually deduct funds.

6) Under In-app Products, create MANAGED in-app items with these IDs:
"membership", and "packX" for each pack available for purchase, where X is a number starting from 1
(pack0 is the free pack and need not be included) and set their prices. To upload multiple packs at
once, rather than one by one, see "Adding a batch of items to a product list" here:
https://developer.android.com/google/play/billing/billing_admin.html.

7) Publish your APK to the Alpha channel. Wait 2-3 hours for Google Play to process the APK. (If
you don't wait, you might see errors where Google Play says that "this version of the application
is not enabled for in-app billing" or something similar.) Ensure that the In-App products move to
the "Active" state within the console before testing.

8) Install the APK on a device, signed in with the test account listed on the alpha release (not
the developer account), and make purchases to test it.



Facebook SDK

1) Signed in to Facebook, go to https://developers.facebook.com. There should be a dropdown menu in
the upper right-hand corner. Click on it to go to "My Apps" -> "Add a New App".

2) On this page there is a green button "+ Add a New App". Click it and enter an app name and
contact email. Creating the new app should take you to a page showing the app's "App ID". Set the
value of facebook_app_id in strings.xml to this value.

3) Add Facebook login
On the same page as above, click on "+ Add Product" in the left-hand menu. Choose "Facebook Login",
then click "Android". Skip steps 1 and 2 (already done). On step 3, enter the package name of this
application (currently com.diversitii.dcapp). Then enter the MainActivity's full name
(currently com.diversitii.dcapp.MainActivity) in the second box and go to step 4.

4) Generating a Development Key Hash
You'll need a development key hash for each Android development environment (PC) that you work on
this app with. To generate a development key hash, on Mac, open the terminal and run the following
command:
    keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64

On Windows, open the terminal and run this command:
    keytool -exportcert -alias androiddebugkey -keystore %HOMEPATH%\.android\debug.keystore | openssl sha1 -binary | openssl base64

This command will generate a 28-character key hash unique to your development environment (PC).
Copy and paste it into the field.

5) Enable single sign on to keep the user logged in to Facebook. You can skip the rest of the steps
(already done). You can now run the app and tap the Facebook login to log in.

6) To use the unimplemented method in MainActivity to post scores to Facebook,
you will need to replace the text "APP_ID" in the string facebook_authorities in strings.xml with
the value of facebook_app_id, e.g. if your app ID is "1234", the value of facebook_authorities is
"com.facebook.app.FacebookContentProvider1234".

7) To release a production version of the app, you will also need to create a release key hash. On
Mac or Windows, get the output of this command, filling in the alias and path to the keystore you
sign the app with:
    keytool -exportcert -alias YOUR_RELEASE_KEY_ALIAS -keystore YOUR_RELEASE_KEY_PATH | openssl sha1 -binary | openssl base64
Add it to your Facebook developer console where you added the development key.

Source: https://developers.facebook.com/docs/facebook-login/android/v2.2



***************************************** NEW INFRASTRUCTURE *****************************************

Setting up Firestore

1) From the Database link in the left-hand menu of the Firebase web dashboard, go to Firestore and
select the "INDEXES" tab.

2) Click "Add index manually"

3) Type "packs" for the Collection name

4) For the first field, enter "doPromote" and leave "ascending" selected

5) For the second field, enter "categoryId" and leave "ascending" selected

6) Click "CREATE INDEX". This may take some time to complete.



New SKUs for memberships

1) From the Google Play Console, create new managed in-app items with the product IDs "copper",
"bronze", "silver", and "gold", and set the prices as desired.

2) From the Google Play Console, create new subscriptions with Product IDs "diamond_annual",
"diamond_biannual", "diamond_quarterly", "red_diamond_annual", "red_diamond_biannual", and
"red_diamond_quarterly" and set the prices and billing periods accordingly.

SKUs

The app expects "membership", "packX", "multipackX", and "catX", in addition to the new membership
Product IDs above.
    "membership" is the blanket membership purchasable from the button on the packs screen
    "packX" is for a purchase of a single pack with ID "X"
    "multipackX" is for a purchase of a multipack with ID "X" (this unlocks 10 single packs within the multipack, but is
            required because purchasing Product IDs "packX", "packX+1", "packX+2", etc. would require the user to confirm
            the purchase 10 times. Additionally, such a purchase would then cost 10 times the pack price, as opposed to a
            special multipack price.)
    "catX" is similar to the multipack ID in that it purchases all packs in the category "X", but is required because the
            purchaser would otherwise need to confirm each pack purchase individually, and for the pricing reason above.

Unfortunately, Google Play is entirely unforgiving with product IDs.
Please be careful when creating and deleting them.
**Note you also cannot delete a subscription once it is created.** The app's Play Store listing will
advertise in-app subscriptions permanently.



FIREBASE

The only folders needed in Firebase Storage are the "icons" folder, which is managed automatically
by the DatabaseInterface, and the "offers" folder.
